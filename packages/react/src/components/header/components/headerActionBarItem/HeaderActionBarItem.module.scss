@use '../../../../styles/common.scss';

button.actionBarItem {
  align-self: center;
  appearance: none;
  background: transparent;
  border: none;
  color: var(--header-color);
  cursor: pointer;
  padding: 10px;

  &:focus-visible {
    border: none;
    outline: var(--header-focus-outline-width) solid var(--header-focus-outline-color);
    outline-offset: var(--header-focus-outline-width);
  }
  &.fullWidth, &:focus-visible {
    outline-offset: calc(-1 * var(--header-focus-outline-width)) !important;
  }

  &.fullWidth {
    display: flex;
    justify-content: center;
    margin: 18px;
    padding: 16px 24px;
    border: 2px solid var(--header-color);
    gap: 8px;
    line-height: 24px;

    & > * {
      text-align: left;
      vertical-align: center;
      padding: 0;
      margin: 0;
    }
    & > *.actionBarItemLabel {
      flex-grow: 1;
    }

    &.hasSubItems {
      border: 0px !important;
      width: 100%;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      margin: 0;
      padding: 16px;
    }
  }

  & > span {
    display: inline-block;
    vertical-align: middle;
  }
  & > svg {
    vertical-align: middle;
    margin: 2px;
  }

  & > .avatar {
    background: var(--color-bus);
    width: 50px;
    height: 50px;
    border-radius: 25px;
    color: white;
    font-weight: 500;
    font-size: 18px;
    line-height: 50px;
    display: inline-block;
    flex-grow: 0;
    text-align: center;
  }
}

.actionBarItemIcon {
  display: block;
  height: var(--icon-size);
  margin: 0 auto;
  padding: 3px 0 0;
  pointer-events: none;
  width: var(--icon-size);

  & > svg {
    display: block;
    height: 100%;
    width: auto;
  }
}

.actionBarItemLabel {
  color: var(--action-bar-item-title-font-color);
  display: block;
  font-size: var(--action-bar-item-title-font-size);
  margin: 0 auto;
  pointer-events: none;
  white-space: nowrap;

  & > svg {
    display: block;
  }
}

.labelOnRight {
  display: inline-block;
}

.fixedRightPosition {
  display: block;
}

/*

@mixin hiddenButTakingHorizontalSpace {
  height: 0;
  opacity: 0;
}

@mixin visibleAndTakingSpace {
  height: auto;
  opacity: 1;
}

.activeStateContent {
  @include hiddenButTakingHorizontalSpace;
}

.activeStateContentLabel {
  white-space: break-spaces;
}

.isActive {
  .activeStateContent {
    @include visibleAndTakingSpace;
  }

  > .actionBarItemIcon {
    display: none;
  }

  > .actionBarItemLabel {
    @include hiddenButTakingHorizontalSpace;
  }
}
*/
