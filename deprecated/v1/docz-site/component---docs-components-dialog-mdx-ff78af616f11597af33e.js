(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{hdAg:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return D})),n.d(t,"default",(function(){return C}));var a=n("cxan"),o=n("+wNj"),i=n("ERkP"),l=n("ZVZ0"),r=n("9Rvw"),s=n("qbsg"),u=n("7UOt"),c=n("si08"),d=n("TEBb"),m=n("cJbd"),p=n("/+8o"),b=n("CdA1"),g=n("8Wed"),f=n("HTio"),h=n("sQ7B"),q=n("vD+s"),v=n("fSvc"),O=n("x0e6"),y=(n("l1C2"),["components"]),D={};void 0!==D&&D&&D===Object(D)&&Object.isExtensible(D)&&!Object.prototype.hasOwnProperty.call(D,"__filemeta")&&Object.defineProperty(D,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/components/dialog.mdx"}});var I={_frontmatter:D},j=r.a;function C(e){var t,n,C,x,B,T=e.components,R=Object(o.a)(e,y);return Object(l.b)(j,Object(a.a)({},I,R,{components:T,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"dialog"},"Dialog"),Object(l.b)(u.a,{type:"alert",mdxType:"StatusLabel"},"Draft"),Object(l.b)(u.a,{type:"success",style:{marginLeft:"var(--spacing-xs)"},mdxType:"StatusLabel"},"Accessible"),Object(l.b)(q.a,{mdxType:"LargeParagraph"},"Dialogs initiate a conversation between the service and the user. They are used when an input or a confirmation is needed from the user or when important information needs to be conveyed."),Object(l.b)("h2",{id:"principles"},"Principles"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Dialogs capture the browser focus and the user is forced to react to the dialog.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"To emphasize this, a dark screen overlay must be used to cover the view content behind the dialog element."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Dialogs are a very intrusive pattern and they should only be used when the immediate actions or focus from the user are needed.")),Object(l.b)("li",{parentName:"ul"},'Be careful when including a separate close ("x") icon in the dialog. If there are more than one action available in the dialog, it can be ambiguous for the user which action is triggered when the close icon is pressed.',Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Generally, it is a good practise to omit the close icon if the dialog has more than one action available."))),Object(l.b)("li",{parentName:"ul"},"If your dialog contains form elements, follow ",Object(l.b)("a",{parentName:"li",href:"/v1/patterns/forms"},"HDS form")," and ",Object(l.b)("a",{parentName:"li",href:"/v1/patterns/form-validation"},"form validation patterns")," similarly as you would in a regular forms."),Object(l.b)("li",{parentName:"ul"},"As dialogs always contain buttons, pay close attention that the button labels describe the action it is going to trigger. You can read more information about this in the ",Object(l.b)("a",{parentName:"li",href:"/v1/components/button"},"HDS Button documentation page"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Following the same guidelines as the HDS Form pattern, dialog action buttons are placed at the left side of the dialog and the primary action will be the first one from the left."),Object(l.b)("li",{parentName:"ul"},"If some of the actions are destructive or irreversible, the button order should be reversed so so that the destructive actions are last in the button list. See ",Object(l.b)("a",{parentName:"li",href:"#danger-dialog"},"Danger dialog example")," for more information."))),Object(l.b)("li",{parentName:"ul"},"Opening a dialog should be always triggered by the user. Do not open dialogs without user action.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Also make sure that the dialog is related to the current context."),Object(l.b)("li",{parentName:"ul"},"It is not recommended to open dialogs on top of other dialogs. However, this is supported by HDS Dialogs if it is needed.")))),Object(l.b)("h3",{id:"when-to-use-each-dialog-type"},"When to use each dialog type?"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"When to use it?"),Object(l.b)("th",{parentName:"tr",align:null},"Example"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"#info-dialog"},"Info")),Object(l.b)("td",{parentName:"tr",align:null},"Important information needs to be conveyed to the user. Only requires acknowledgment and no choices from the user."),Object(l.b)("td",{parentName:"tr",align:null},"Informing the user about changed terms of use.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"#confirm-dialog"},"Confirm")),Object(l.b)("td",{parentName:"tr",align:null},"An action is required from the user."),Object(l.b)("td",{parentName:"tr",align:null},"Confirming that the user wants to continue even though all form fields are not filled.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"#danger-dialog"},"Danger")),Object(l.b)("td",{parentName:"tr",align:null},"An action is required from the user while ",Object(l.b)("strong",{parentName:"td"},"the action results are destructive"),"."),Object(l.b)("td",{parentName:"tr",align:null},"Confirming that the user wants to delete a blog post.")))),Object(l.b)("h2",{id:"accessibility"},"Accessibility"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When the dialog is closed, the focus should return to the element that triggered the original dialog context. This allows keyboard and screen reader users to continue the context where they originally opened the dialog.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If the dialog was opened on a page load, the focus should be returned to the start of the ",Object(l.b)("inlineCode",{parentName:"li"},"body")," element."))),Object(l.b)("li",{parentName:"ul"},"When the dialog is active, everything outside of the dialog should be inaccessible to the user."),Object(l.b)("li",{parentName:"ul"},"Pay attention to the roles of buttons of your dialog. If you use the button as a link instead of an action (i.e. the button press opens a new page), you must specify a ",Object(l.b)("inlineCode",{parentName:"li"},'role="link"')," attribute to the button.")),Object(l.b)("h2",{id:"usage--variations"},"Usage & variations"),Object(l.b)("h3",{id:"info-dialog"},"Info dialog"),Object(l.b)("p",null,"Info dialogs are used to convey important information to the user. Info dialogs only include one button which the user can use to acknowledge the information."),Object(l.b)(s.c,{__position:2,__code:'() => {\n  const dialogTargetRef = React.useRef(null) // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openInfoDialogButtonRef = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const close = () => setIsOpen(false)\n  const titleId = \'info-dialog-title\'\n  const descriptionId = \'info-dialog-content\'\n  return (\n    <>\n      <div ref={dialogTargetRef} />\n      <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Info dialog\n      </Button>\n      <Dialog\n        id="info-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        close={close}\n        closeButtonLabelText="Close info dialog"\n        focusAfterCloseRef={openInfoDialogButtonRef}\n        targetElement={dialogTargetRef.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Terms of service have changed"\n          iconLeft={<IconInfoCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            Please note that the terms of this service have changed. You can\n            review the changes in the user settings.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>Close</Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}',__scope:(t={props:R,DefaultLayout:r.a,Playground:s.c,StatusLabel:u.a,Button:c.a,Dialog:d.a,TextArea:m.a,TextInput:p.a,IconInfoCircle:b.I,IconQuestionCircle:g.a,IconAlertCircle:f.a,IconPlusCircle:b.Mb,IconTrash:b.lb,ColorBox:h.a,LargeParagraph:q.a,Link:v.a,Text:O.a},t.DefaultLayout=r.a,t._frontmatter=D,t),mdxType:"Playground"},(function(){var e=i.useRef(null),t=i.useRef(null),n=i.useState(!1),a=n[0],o=n[1],r=function(){return o(!1)};return Object(l.b)(i.Fragment,null,Object(l.b)("div",{ref:e}),Object(l.b)(c.a,{ref:t,onClick:function(){return o(!0)},mdxType:"Button"},"Open Info dialog"),Object(l.b)(d.a,{id:"info-dialog","aria-labelledby":"info-dialog-title","aria-describedby":"info-dialog-content",isOpen:a,close:r,closeButtonLabelText:"Close info dialog",focusAfterCloseRef:t,targetElement:e.current,mdxType:"Dialog"},Object(l.b)(d.a.Header,{id:"info-dialog-title",title:"Terms of service have changed",iconLeft:Object(l.b)(b.I,{"aria-hidden":"true",mdxType:"IconInfoCircle"})}),Object(l.b)(d.a.Content,null,Object(l.b)("p",{id:"info-dialog-content",className:"text-body"},"Please note that the terms of this service have changed. You can review the changes in the user settings.")),Object(l.b)(d.a.ActionButtons,null,Object(l.b)(c.a,{onClick:r,mdxType:"Button"},"Close"))))})),Object(l.b)("h4",{id:"react-code-example"},"React code example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'{() => {\n    const openInfoDialogButtonRef = React.useRef(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const close = () => setIsOpen(false);\n    const titleId = "info-dialog-title";\n    const descriptionId = "info-dialog-content";\n    return (\n      <>\n        <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)}>\n          Open Info dialog\n        </Button>\n        <Dialog\n          id="info-dialog"\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          isOpen={isOpen}\n          close={close}\n          closeButtonLabelText="Close info dialog"\n          focusAfterCloseRef={openInfoDialogButtonRef}\n        >\n          <Dialog.Header\n            id={titleId}\n            title="Terms of service have changed"\n            iconLeft={<IconInfoCircle aria-hidden="true" />}\n          />\n          <Dialog.Content>\n            <p id={descriptionId} className="text-body">\n              Please note that the terms of this service have changed. You can review the changes in the user settings.\n            </p>\n          </Dialog.Content>\n          <Dialog.ActionButtons>\n            <Button onClick={close}>\n              Close\n            </Button>\n          </Dialog.ActionButtons>\n        </Dialog>\n      </>\n    )\n  }}\n')),Object(l.b)("h3",{id:"confirm-dialog"},"Confirm dialog"),Object(l.b)("p",null,"Confirm dialogs are used when an action is required from the user. Confirm dialogs always include at least two actions; one primary action (e.g. Confirm) and one secondary action (e.g. Cancel). However, more than two actions are allowed if it is needed."),Object(l.b)(s.c,{__position:3,__code:'() => {\n  const confirmationDialogTarget = React.useRef(null) // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openConfirmationDialogButtonRef = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const close = () => setIsOpen(false)\n  const titleId = \'confirmation-dialog-title\'\n  const descriptionId = \'confirmation-dialog-info\'\n  return (\n    <>\n      <div ref={confirmationDialogTarget} />\n      <Button\n        ref={openConfirmationDialogButtonRef}\n        onClick={() => setIsOpen(true)}\n      >\n        Open Confirmation dialog\n      </Button>\n      <Dialog\n        id="confirmation-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openConfirmationDialogButtonRef}\n        targetElement={confirmationDialogTarget.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Are you sure you want to continue?"\n          iconLeft={<IconQuestionCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            You have not filled all form fields. Do you still want to\n            continue? You can later return to edit this form. Saved forms can\n            be accessed in your personal profile.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>Continue</Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}',__scope:(n={props:R,DefaultLayout:r.a,Playground:s.c,StatusLabel:u.a,Button:c.a,Dialog:d.a,TextArea:m.a,TextInput:p.a,IconInfoCircle:b.I,IconQuestionCircle:g.a,IconAlertCircle:f.a,IconPlusCircle:b.Mb,IconTrash:b.lb,ColorBox:h.a,LargeParagraph:q.a,Link:v.a,Text:O.a},n.DefaultLayout=r.a,n._frontmatter=D,n),mdxType:"Playground"},(function(){var e=i.useRef(null),t=i.useRef(null),n=i.useState(!1),a=n[0],o=n[1],r=function(){return o(!1)},s="confirmation-dialog-title";return Object(l.b)(i.Fragment,null,Object(l.b)("div",{ref:e}),Object(l.b)(c.a,{ref:t,onClick:function(){return o(!0)},mdxType:"Button"},"Open Confirmation dialog"),Object(l.b)(d.a,{id:"confirmation-dialog","aria-labelledby":s,"aria-describedby":"confirmation-dialog-info",isOpen:a,focusAfterCloseRef:t,targetElement:e.current,mdxType:"Dialog"},Object(l.b)(d.a.Header,{id:s,title:"Are you sure you want to continue?",iconLeft:Object(l.b)(g.a,{"aria-hidden":"true",mdxType:"IconQuestionCircle"})}),Object(l.b)(d.a.Content,null,Object(l.b)("p",{id:"confirmation-dialog-info",className:"text-body"},"You have not filled all form fields. Do you still want to continue? You can later return to edit this form. Saved forms can be accessed in your personal profile.")),Object(l.b)(d.a.ActionButtons,null,Object(l.b)(c.a,{onClick:r,mdxType:"Button"},"Continue"),Object(l.b)(c.a,{onClick:r,variant:"secondary",mdxType:"Button"},"Cancel"))))})),Object(l.b)("h4",{id:"react-code-example-1"},"React code example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'  {() => {\n    const openConfirmationDialogButtonRef = React.useRef(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const close = () => setIsOpen(false);\n    const titleId = "confirmation-dialog-title";\n    const descriptionId = "confirmation-dialog-info";\n    return (\n      <>\n        <Button ref={openConfirmationDialogButtonRef} onClick={() => setIsOpen(true)}>\n          Open Confirmation dialog\n        </Button>\n        <Dialog\n          id="confirmation-dialog"\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          isOpen={isOpen}\n          focusAfterCloseRef={openConfirmationDialogButtonRef}\n        >\n          <Dialog.Header\n            id={titleId}\n            title="Are you sure you want to continue?"\n            iconLeft={<IconQuestionCircle aria-hidden="true" />}\n          />\n          <Dialog.Content>\n            <p id={descriptionId} className="text-body">\n              You have not filled all form fields. Do you still want to continue? You can later return to edit this form. Saved forms can be accessed in your personal profile.\n            </p>\n          </Dialog.Content>\n          <Dialog.ActionButtons>\n            <Button onClick={close}>\n              Continue\n            </Button>\n            <Button onClick={close} variant="secondary">\n              Cancel\n            </Button>\n          </Dialog.ActionButtons>\n        </Dialog>\n      </>\n    )\n  }}\n')),Object(l.b)("h3",{id:"danger-dialog"},"Danger dialog"),Object(l.b)("p",null,"Danger dialog is a variant of a confirm dialog. They are used in similar use cases but Danger dialogs are meant for situations where the action user is going to choose may be destructive or otherwise irreversible or very critical. Danger dialog emphasizes this by using HDS error status colours. Also, it reverses the action button order so that the destructive action is last in the button list."),Object(l.b)(s.c,{__position:4,__code:'() => {\n  const dangerDialogTargetRef = React.useRef(null) // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openDeleteDialogButtonRef = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const close = () => setIsOpen(false)\n  const titleId = \'delete-dialog-title\'\n  const descriptionId = \'delete-dialog-info\'\n  return (\n    <>\n      <div ref={dangerDialogTargetRef} />\n      <Button ref={openDeleteDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Delete dialog\n      </Button>\n      <Dialog\n        variant="danger"\n        id="delete-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openDeleteDialogButtonRef}\n        targetElement={dangerDialogTargetRef.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Are you sure you want to delete this blog post?"\n          iconLeft={<IconAlertCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            The blog post will be deleted immediately. Deletion is permanent\n            and it cannot be reverted.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} theme="black" variant="secondary">\n            Cancel\n          </Button>\n          <Button\n            variant="danger"\n            iconLeft={<IconTrash aria-hidden="true" />}\n            onClick={() => {\n              // Add confirm operations here\n              close()\n            }}\n          >\n            Delete the blog post\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}',__scope:(C={props:R,DefaultLayout:r.a,Playground:s.c,StatusLabel:u.a,Button:c.a,Dialog:d.a,TextArea:m.a,TextInput:p.a,IconInfoCircle:b.I,IconQuestionCircle:g.a,IconAlertCircle:f.a,IconPlusCircle:b.Mb,IconTrash:b.lb,ColorBox:h.a,LargeParagraph:q.a,Link:v.a,Text:O.a},C.DefaultLayout=r.a,C._frontmatter=D,C),mdxType:"Playground"},(function(){var e=i.useRef(null),t=i.useRef(null),n=i.useState(!1),a=n[0],o=n[1],r=function(){return o(!1)};return Object(l.b)(i.Fragment,null,Object(l.b)("div",{ref:e}),Object(l.b)(c.a,{ref:t,onClick:function(){return o(!0)},mdxType:"Button"},"Open Delete dialog"),Object(l.b)(d.a,{variant:"danger",id:"delete-dialog","aria-labelledby":"delete-dialog-title","aria-describedby":"delete-dialog-info",isOpen:a,focusAfterCloseRef:t,targetElement:e.current,mdxType:"Dialog"},Object(l.b)(d.a.Header,{id:"delete-dialog-title",title:"Are you sure you want to delete this blog post?",iconLeft:Object(l.b)(f.a,{"aria-hidden":"true",mdxType:"IconAlertCircle"})}),Object(l.b)(d.a.Content,null,Object(l.b)("p",{id:"delete-dialog-info",className:"text-body"},"The blog post will be deleted immediately. Deletion is permanent and it cannot be reverted.")),Object(l.b)(d.a.ActionButtons,null,Object(l.b)(c.a,{onClick:r,theme:"black",variant:"secondary",mdxType:"Button"},"Cancel"),Object(l.b)(c.a,{variant:"danger",iconLeft:Object(l.b)(b.lb,{"aria-hidden":"true",mdxType:"IconTrash"}),onClick:function(){r()},mdxType:"Button"},"Delete the blog post"))))})),Object(l.b)("h4",{id:"react-code-example-2"},"React code example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'{() => {\n    const openDeleteDialogButtonRef = React.useRef(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const close = () => setIsOpen(false);\n    const titleId = "delete-dialog-title";\n    const descriptionId = "delete-dialog-info";\n    return (\n      <>\n        <Button ref={openDeleteDialogButtonRef} onClick={() => setIsOpen(true)}>\n          Open Delete dialog\n        </Button>\n        <Dialog\n          variant="danger"\n          id="delete-dialog"\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          isOpen={isOpen}\n          focusAfterCloseRef={openDeleteDialogButtonRef}\n        >\n          <Dialog.Header\n            id={titleId}\n            title="Are you sure you want to delete this blog post?"\n            iconLeft={<IconAlertCircle aria-hidden="true" />}\n          />\n          <Dialog.Content>\n            <p id={descriptionId} className="text-body">\n              The blog post will be deleted immediately. Deletion is permanent and it cannot be reverted.\n            </p>\n          </Dialog.Content>\n          <Dialog.ActionButtons>\n            <Button onClick={close} theme="black" variant="secondary">\n              Cancel\n            </Button>\n            <Button\n              variant="danger"\n              iconLeft={<IconTrash aria-hidden="true" />}\n              onClick={() => {\n                // Add confirm operations here\n                close();\n              }}\n            >\n              Delete the blog post\n            </Button>\n          </Dialog.ActionButtons>\n        </Dialog>\n      </>\n    )\n  }}\n')),Object(l.b)("h3",{id:"scrollable-dialog"},"Scrollable dialog"),Object(l.b)("p",null,"While not recommended, HDS supports scrollable dialogs if there is a large amount of content (e.g. terms of use). ",Object(l.b)("strong",{parentName:"p"},"It is recommended to consider other options than a dialog to present the same data since it can be difficult for the user to form a clear understanding of the presented content.")),Object(l.b)(s.c,{__position:5,__code:'() => {\n  const termsDialogTargetRef = React.useRef(null) // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openTermsDialogButtonRef = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const close = () => setIsOpen(false)\n  const titleId = \'terms-dialog-title\'\n  const descriptionId = \'terms-dialog-info\'\n  return (\n    <>\n      <div ref={termsDialogTargetRef} />\n      <Button ref={openTermsDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Terms dialog\n      </Button>\n      <Dialog\n        id="terms-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openTermsDialogButtonRef}\n        targetElement={termsDialogTargetRef.current}\n        scrollable\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Do you accept the terms of service?"\n          iconLeft={<IconAlertCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <h3 id={descriptionId}>Terms of service</h3>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\n            accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n            quae ab illo inventore veritatis et quasi architecto beatae vitae\n            dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n            aspernatur aut odit aut fugit, sed quia consequuntur magni dolores\n            eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam\n            est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n            velit, sed quia non numquam eius modi tempora incidunt ut labore\n            et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima\n            veniam, quis nostrum exercitationem ullam corporis suscipit\n            laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem\n            vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo\n            voluptas nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\n            accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n            quae ab illo inventore veritatis et quasi architecto beatae vitae\n            dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n            aspernatur aut odit aut fugit, sed quia consequuntur magni dolores\n            eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam\n            est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n            velit, sed quia non numquam eius modi tempora incidunt ut labore\n            et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima\n            veniam, quis nostrum exercitationem ullam corporis suscipit\n            laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem\n            vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo\n            voluptas nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\n            accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n            quae ab illo inventore veritatis et quasi architecto beatae vitae\n            dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n            aspernatur aut odit aut fugit, sed quia consequuntur magni dolores\n            eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam\n            est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n            velit, sed quia non numquam eius modi tempora incidunt ut labore\n            et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima\n            veniam, quis nostrum exercitationem ullam corporis suscipit\n            laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem\n            vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo\n            voluptas nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\n            accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n            quae ab illo inventore veritatis et quasi architecto beatae vitae\n            dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n            aspernatur aut odit aut fugit, sed quia consequuntur magni dolores\n            eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam\n            est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n            velit, sed quia non numquam eius modi tempora incidunt ut labore\n            et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima\n            veniam, quis nostrum exercitationem ullam corporis suscipit\n            laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem\n            vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo\n            voluptas nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\n            accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n            quae ab illo inventore veritatis et quasi architecto beatae vitae\n            dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n            aspernatur aut odit aut fugit, sed quia consequuntur magni dolores\n            eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam\n            est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n            velit, sed quia non numquam eius modi tempora incidunt ut labore\n            et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima\n            veniam, quis nostrum exercitationem ullam corporis suscipit\n            laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem\n            vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo\n            voluptas nulla pariatur?\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>Accept terms</Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}',__scope:(x={props:R,DefaultLayout:r.a,Playground:s.c,StatusLabel:u.a,Button:c.a,Dialog:d.a,TextArea:m.a,TextInput:p.a,IconInfoCircle:b.I,IconQuestionCircle:g.a,IconAlertCircle:f.a,IconPlusCircle:b.Mb,IconTrash:b.lb,ColorBox:h.a,LargeParagraph:q.a,Link:v.a,Text:O.a},x.DefaultLayout=r.a,x._frontmatter=D,x),mdxType:"Playground"},(function(){var e=i.useRef(null),t=i.useRef(null),n=i.useState(!1),a=n[0],o=n[1],r=function(){return o(!1)};return Object(l.b)(i.Fragment,null,Object(l.b)("div",{ref:e}),Object(l.b)(c.a,{ref:t,onClick:function(){return o(!0)},mdxType:"Button"},"Open Terms dialog"),Object(l.b)(d.a,{id:"terms-dialog","aria-labelledby":"terms-dialog-title","aria-describedby":"terms-dialog-info",isOpen:a,focusAfterCloseRef:t,targetElement:e.current,scrollable:!0,mdxType:"Dialog"},Object(l.b)(d.a.Header,{id:"terms-dialog-title",title:"Do you accept the terms of service?",iconLeft:Object(l.b)(f.a,{"aria-hidden":"true",mdxType:"IconAlertCircle"})}),Object(l.b)(d.a.Content,null,Object(l.b)("h3",{id:"terms-dialog-info"},"Terms of service"),Object(l.b)("p",{className:"text-body"},"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"),Object(l.b)("p",{className:"text-body"},"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"),Object(l.b)("p",{className:"text-body"},"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"),Object(l.b)("p",{className:"text-body"},"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"),Object(l.b)("p",{className:"text-body"},"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?")),Object(l.b)(d.a.ActionButtons,null,Object(l.b)(c.a,{onClick:r,mdxType:"Button"},"Accept terms"),Object(l.b)(c.a,{onClick:r,variant:"secondary",mdxType:"Button"},"Cancel"))))})),Object(l.b)("h4",{id:"react-code-example-3"},"React code example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'{() => {\n    const openTermsDialogButtonRef = React.useRef(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const close = () => setIsOpen(false);\n    const titleId = "terms-dialog-title";\n    const descriptionId = "terms-dialog-info";\n    return (\n      <>\n        <Button ref={openTermsDialogButtonRef} onClick={() => setIsOpen(true)}>\n          Open Terms dialog\n        </Button>\n        <Dialog\n          id="terms-dialog"\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          isOpen={isOpen}\n          focusAfterCloseRef={openTermsDialogButtonRef}\n          scrollable\n        >\n          <Dialog.Header\n            id={titleId}\n            title="Do you accept the terms of service?"\n            iconLeft={<IconAlertCircle aria-hidden="true" />}\n          />\n          <Dialog.Content>\n            <h3 id={descriptionId}>Terms of service</h3>\n            <p className="text-body">\n              ...\n            </p>\n          </Dialog.Content>\n          <Dialog.ActionButtons>\n            <Button onClick={close}>\n              Accept terms\n            </Button>\n            <Button onClick={close} variant="secondary">\n              Cancel\n            </Button>\n          </Dialog.ActionButtons>\n        </Dialog>\n      </>\n    )\n  }}\n')),Object(l.b)("h3",{id:"dialog-with-custom-content"},"Dialog with custom content"),Object(l.b)("p",null,"HDS Dialog elements can be used to build custom dialogs. Using HDS provided elements ensures the base level accessibility for the components. They also visually match to other HDS components."),Object(l.b)(s.c,{__position:6,__code:'() => {\n  const customDialogTargetRef = React.useRef(null) // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openCustomDialogButtonRef = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const close = () => setIsOpen(false)\n  const titleId = \'custom-dialog-title\'\n  const descriptionId = \'custom-dialog-info\'\n  return (\n    <>\n      <div ref={customDialogTargetRef} />\n      <Button ref={openCustomDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Dialog with custom content\n      </Button>\n      <Dialog\n        id="custom-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openCustomDialogButtonRef}\n        targetElement={customDialogTargetRef.current}\n      >\n        <Dialog.Header id={titleId} title="Add new item" />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            Add a new item by filling the information below. All fields are\n            mandatory.\n          </p>\n          <TextInput\n            id="item-name"\n            label="Item name"\n            placeholder="E.g. Item 1"\n            helperText="Item\'s name must be unique."\n            required\n          />\n          <br />\n          <TextArea\n            id="item-description"\n            label="Item description"\n            placeholder="E.g. Item 1 is the first item of the system."\n            required\n          />\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button\n            onClick={() => {\n              // Add operations here\n              close()\n            }}\n          >\n            Add item\n          </Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}',__scope:(B={props:R,DefaultLayout:r.a,Playground:s.c,StatusLabel:u.a,Button:c.a,Dialog:d.a,TextArea:m.a,TextInput:p.a,IconInfoCircle:b.I,IconQuestionCircle:g.a,IconAlertCircle:f.a,IconPlusCircle:b.Mb,IconTrash:b.lb,ColorBox:h.a,LargeParagraph:q.a,Link:v.a,Text:O.a},B.DefaultLayout=r.a,B._frontmatter=D,B),mdxType:"Playground"},(function(){var e=i.useRef(null),t=i.useRef(null),n=i.useState(!1),a=n[0],o=n[1],r=function(){return o(!1)};return Object(l.b)(i.Fragment,null,Object(l.b)("div",{ref:e}),Object(l.b)(c.a,{ref:t,onClick:function(){return o(!0)},mdxType:"Button"},"Open Dialog with custom content"),Object(l.b)(d.a,{id:"custom-dialog","aria-labelledby":"custom-dialog-title","aria-describedby":"custom-dialog-info",isOpen:a,focusAfterCloseRef:t,targetElement:e.current,mdxType:"Dialog"},Object(l.b)(d.a.Header,{id:"custom-dialog-title",title:"Add new item"}),Object(l.b)(d.a.Content,null,Object(l.b)("p",{id:"custom-dialog-info",className:"text-body"},"Add a new item by filling the information below. All fields are mandatory."),Object(l.b)(p.a,{id:"item-name",label:"Item name",placeholder:"E.g. Item 1",helperText:"Item's name must be unique.",required:!0,mdxType:"TextInput"}),Object(l.b)("br",null),Object(l.b)(m.a,{id:"item-description",label:"Item description",placeholder:"E.g. Item 1 is the first item of the system.",required:!0,mdxType:"TextArea"})),Object(l.b)(d.a.ActionButtons,null,Object(l.b)(c.a,{onClick:function(){r()},mdxType:"Button"},"Add item"),Object(l.b)(c.a,{onClick:r,variant:"secondary",mdxType:"Button"},"Cancel"))))})),Object(l.b)("h4",{id:"react-code-example-4"},"React code example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'{() => {\n    const openCustomDialogButtonRef = React.useRef(null);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const close = () => setIsOpen(false);\n    const titleId = "custom-dialog-title";\n    const descriptionId = "custom-dialog-info";\n    return (\n      <>\n        <Button ref={openCustomDialogButtonRef} onClick={() => setIsOpen(true)}>\n          Open Dialog with custom content\n        </Button>\n        <Dialog\n          id="custom-dialog"\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          isOpen={isOpen}\n          focusAfterCloseRef={openCustomDialogButtonRef}\n        >\n        <Dialog.Header\n          id={titleId}\n          title="Add new item"\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            Add a new item by filling the information below. All fields are mandatory.\n          </p>\n          <TextInput\n            id="item-name"\n            label="Item name"\n            placeholder="E.g. Item 1"\n            helperText="Item\'s name must be unique."\n            required\n          />\n          <br />\n          <TextArea\n            id="item-description"\n            label="Item description"\n            placeholder="E.g. Item 1 is the first item of the system."\n            required\n          />\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button\n            onClick={() => {\n              // Add operations here\n              close();\n            }}\n          >\n            Add item\n          </Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n      </>\n    )\n  }}\n')),Object(l.b)("h2",{id:"demos--api"},"Demos & API"),Object(l.b)("h3",{id:"core"},"Core"),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"Not included in hds-core!")),Object(l.b)("h3",{id:"react"},"React"),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"/v1/storybook/react/?path=/story/components-dialog--default"},"Dialog in hds-react")),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"/v1/storybook/react/?path=/docs/components-dialog--default"},"Dialog API")))}void 0!==C&&C&&C===Object(C)&&Object.isExtensible(C)&&!Object.prototype.hasOwnProperty.call(C,"__filemeta")&&Object.defineProperty(C,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/components/dialog.mdx"}}),C.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-components-dialog-mdx-ff78af616f11597af33e.js.map